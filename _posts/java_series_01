1)What are the various important components that are involved in compiling and
running a Java program?
-> When we start working on java applications, the very first software that we
download and install is
a JDK, which stands for Java Development Kit.
-> The JDK is comprised of JRE and it also comes with several comments or
programs such as the Java compiler,
the Java command that we use to run a Java program and more.
-> We download the JDK and install it for a particular operating system.
-> There are different versions for different operating systems for the JDK and
the JRE, we can
install JRE separately as well, but usually we install the JDK and the JRE.
-> When we compile the Java program, the Java compiler will convert the Java
class into bytecode, not
the machine code, which the underlying operating system understands, but the
byte code, which is
platform independent, the bytecode is only understood by the JVM.
-> The Java Virtual machine, which we launch using the Java Command.
-> When we run our Java class file that gets generated during compilation with
Java Command, it will launch
a JVM that can interpret the bytecode to the underlying operating system
that makes Java platform
independent.
-> A JVM is an instance of the JRE.
It is a representation of the Java runtime environment.
So the platform independency comes because we can compile a Java program on
a Windows operating system
and then we can take the classes and run them on Linux using the JVM on
Linux, because the bytecode
is understood by the interpreter or the JVM on Linux, and it can convert it
into the machine code,
which Linux understands.
-> JIT, which stands for Just in Time compiler, is another important component,
which is a part of the
JVM that will interpret the code to the underlying operating system in a
optimized fashion.
-> It knows much more details about the operating system and it converts the
byte code little bit at a time
by default, if we don't use the JIT interpreter or compiler, the JVM will
translate the entire
bytecode into machine code and it will execute against the operating system.
-> Whereas if we use the JIT, it converts a little bit of bytecode at a time
and then it can do certain
optimizations by inlining functions, etc., which makes our application
perform better.
-> By default, the JIT is enabled when we use a Java command if you want to
disable it for debugging reasons
or whatever, you can use the hyphen D option javadot compiler is equal to
none.
-> This will disable the JIT.
